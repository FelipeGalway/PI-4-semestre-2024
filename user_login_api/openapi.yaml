openapi: 3.0.0
info:
  title: API de Gerenciamento de Usuários
  description: API para registro, autenticação e gerenciamento de usuários
  version: 1.0.0

servers:
  - url: http://localhost:5000/api/v1
    description: Servidor de desenvolvimento

paths:
  /users/register:
    post:
      summary: Registrar um novo usuário
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          description: Dados inválidos ou email já cadastrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      summary: Autenticar usuário
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Listar todos os usuários
      tags:
        - Usuários
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de usuários recuperada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{id}:
    get:
      summary: Obter um usuário específico
      tags:
        - Usuários
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      summary: Atualizar perfil do usuário
      tags:
        - Usuários
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Perfil atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Não autorizado a atualizar outro usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Excluir conta do usuário
      tags:
        - Usuários
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Conta excluída com sucesso
        '403':
          description: Não autorizado a excluir outro usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - cpf
        - name
        - email
        - password
      properties:
        cpf:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    User:
      type: object
      properties:
        id:
          type: string
        cpf:
          type: string
        name:
          type: string
        email:
          type: string
          format: email

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    RegistrationResponse:
      type: object
      properties:
        message:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    ErrorResponse:
      type: object
      properties:
        message:
          type: string

  responses:
    UnauthorizedError:
      description: Token de autenticação ausente ou inválido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []